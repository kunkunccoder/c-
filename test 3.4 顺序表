#include <stdio.h>
#include <stdlib.h>

#define num 10
typedef int SLdate;
typedef struct Listquene SL;

struct Listquene
{
    SLdate *a;
    SLdate size;
    SLdate capacity;
};

void Listinit(SL *ps)
{
    ps->a=NULL;
    ps->size=0;
    ps->capacity=1;
    
}

void Listcheck(SL *ps)
{
    if(ps->size==ps->capacity)
    {
        ps->capacity*=2;
    }
    ps->a=(SLdate*)realloc(ps->a,sizeof(SLdate)*(ps->capacity));
}

void Listpushback(SL *ps,int val)
{
    Listcheck(ps);
    ps->a[ps->size]=val;
    ps->size++;
}

void Listpushfront(SL *ps,int val)
{
    Listcheck(ps);
    int end=ps->size;
    while(end>0)
    {
        ps->a[end]=ps->a[end-1];
        end--;
    }
    ps->size++;
    ps->a[end]=val;
}

void Listpopback(SL *ps)
{
    (ps->size)--;
}

void Listpopfront(SL *ps)
{
    int i=0;
    while(i<(ps->size)-1)
    {
        ps->a[i]=ps->a[i+1];
        i++;
    }
    (ps->size)--;
}
void Listprint(SL *ps)
{
    int i=0;
    for(i=0;i<ps->size;i++)
    {
        printf("%d ",ps->a[i]);
    }
    printf("\n");
}

void Listdestory(SL *ps)
{
    free(ps->a);
    ps->size=ps->capacity=0;
}

void Listinsert(SL *ps,int pos,int val)
{
    Listcheck(ps);
    int i=pos;
    while(i<=ps->size)
    {
        ps->a[i+1]=ps->a[i];
        i++;
    }
    ps->a[pos]=val;
}

void Listerose(SL *ps,int pos)
{
    Listcheck(ps);
    int i=pos;
    while(i<ps->size-1)
    {
        ps->a[i]=ps->a[i+1];
        i++;
    }
    ps->size--;
}

void Test01(void)
{
    SL s1;
    Listinit(&s1);
    Listpushback(&s1,1);
    Listpushback(&s1,2);
    Listpushfront(&s1,0);
    Listpushback(&s1,3);
    Listpushback(&s1,4);
    Listpushback(&s1,5);
    Listpushback(&s1,6);
    Listpopback(&s1);
    Listinsert(&s1,1,20);
    Listprint(&s1);
    Listerose(&s1,1);
    Listprint(&s1);
    Listpopfront(&s1);
    Listpopfront(&s1);
    Listpopfront(&s1);
    Listprint(&s1);
    Listdestory(&s1);
}

int main()
{
    Test01();
    return 0;
}
